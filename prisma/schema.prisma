// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectType {
  WEB_APP
  MOBILE_APP
  DESKTOP_APP
  DATA_SCIENCE
  MACHINE_LEARNING
  DIGITAL_IMAGING
  GAME
  API
  LIBRARY
  CLI
  OTHER
}

model Thread {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  imageUrl  String?
  github    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  languages Language[]
  types     ProjectType[]
  images    Image[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Language {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  threads Thread[]
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Image {
  id        String   @id @default(cuid())
  data      Bytes
  mimeType  String
  createdAt DateTime @default(now())
  threadId  Int?
  thread    Thread?   @relation(fields: [threadId], references: [id])
}