generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thread {
  id        Int           @id @default(autoincrement())
  title     String
  content   String
  github    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  types     ProjectType[]
  comments  Comment[]
  medias    Media[]
  languages Language[]    @relation("LanguageToThread")
  skills    Skill[]       @relation("SkillToThread")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  threadId  Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  comments      Comment[]
  messages      Message[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Language {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  image   String?
  threads Thread[] @relation("LanguageToThread")
  skills  Skill[]  @relation("LanguageToSkill")
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])
}

model Media {
  id          String   @id
  type        String
  alt         String?
  mimeType    String
  size        Int
  fileName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  threadId    Int?
  thumbnailId String?
  isThumbnail Boolean  @default(false)
  thread      Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  thumbnail   Media?   @relation("ThumbnailToVideo", fields: [thumbnailId], references: [id])
  videos      Media[]  @relation("ThumbnailToVideo")

  @@index([threadId])
  @@index([thumbnailId])
}

model Skill {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  formation   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  categoryId  Int
  category    SkillCategory @relation(fields: [categoryId], references: [id])
  languages   Language[]    @relation("LanguageToSkill")
  threads     Thread[]      @relation("SkillToThread")

  @@unique([name, categoryId])
  @@index([categoryId])
}

model SkillCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  title       String
  icon        String
  description String?
  skills      Skill[]
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
  AUDIO
  THUMBNAIL
}

enum ProjectType {
  WEB_APP
  MOBILE_APP
  DESKTOP_APP
  DATA_SCIENCE
  MACHINE_LEARNING
  DIGITAL_IMAGING
  GAME
  API
  LIBRARY
  CLI
  OTHER
}
